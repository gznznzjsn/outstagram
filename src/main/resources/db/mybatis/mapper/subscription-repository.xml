<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.gznznzjsn.outstagram.persistence.repository.SubscriptionRepository">

    <resultMap id="SubscriptionMap" type="Subscription" autoMapping="false">
        <id column="id" property="id"/>
        <result column="created_at" property="createdAt"/>
        <association column="source_id" property="source" columnPrefix="source_"
                     resultMap="com.gznznzjsn.outstagram.persistence.repository.AccountRepository.AccountMap"
                     autoMapping="false"/>
        <association column="target_id" property="target" columnPrefix="target_"
                     resultMap="com.gznznzjsn.outstagram.persistence.repository.AccountRepository.AccountMap"
                     autoMapping="false"/>
    </resultMap>

    <insert id="create">
        match (a:ACCOUNT), (b:ACCOUNT)
        where a.id = #{source.id} and b.id = #{target.id}
        create (a)-[:SUBSCRIBED {
                id: #{id},
                created_at: #{createdAt}
        }]->(b)
    </insert>

    <insert id="delete">
        match (a:ACCOUNT) -[s:SUBSCRIBED]-> (b:ACCOUNT)
        where a.id = #{source.id} and b.id = #{target.id}
        delete s
    </insert>

    <select id="readSubscriptions" resultMap="SubscriptionMap">
        match (a:ACCOUNT) -[s:SUBSCRIBED]-> (b:ACCOUNT)
        where a.id = #{accountId}
        return
            s.id as id,
            a.id as SOURCE_id,
            a.name as SOURCE_name,
            a.description as SOURCE_description,
            a.is_private as SOURCE_is_private,
            a.created_at as SOURCE_created_at,
            b.id as TARGET_id,
            b.name as TARGET_name,
            b.description as TARGET_description,
            b.is_private as TARGET_is_private,
            b.created_at as TARGET_created_at,
            s.created_at as created_at
    </select>

</mapper>